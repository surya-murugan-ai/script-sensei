name: ScriptSensei CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Build Job
  test-and-build:
    name: 🧪 Test & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 TypeScript type check
        run: npm run check

      - name: 🔨 Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📊 Verify build artifacts
        run: |
          echo "✅ Checking dist directory..."
          ls -la dist/
          echo "✅ Checking dist/public directory..."
          ls -la dist/public/
          echo "✅ Build verification complete!"

  # Docker Build and Push Job
  docker-build-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ✅ Image digest
        run: echo "Image pushed with digest ${{ steps.meta.outputs.digest }}"

  # Security Scan Job
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

  # Deploy to DigitalOcean (Optional - only on main branch)
  deploy-digitalocean:
    name: 🚀 Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}

      - name: 🚀 Deploy to DigitalOcean Droplet
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_IP << 'ENDSSH'
            # Create directory if it doesn't exist
            mkdir -p ~/script-sensei
            cd ~/script-sensei
            
            # Clone if directory is empty, or pull if it exists
            if [ -d ".git" ]; then
              echo "📥 Pulling latest code..."
              git pull origin main
            else
              echo "📥 Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git .
              git checkout main
            fi
            
            # Login to GitHub Container Registry
            echo "🔐 Logging into GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull latest Docker image
            echo "🐳 Pulling latest Docker image..."
            docker-compose pull
            
            # Run database migrations
            echo "🗄️ Running database migrations..."
            docker-compose run --rm app npm run db:push
            
            # Restart services with new image
            echo "🔄 Restarting services..."
            docker-compose up -d
            
            # Clean up old images
            echo "🧹 Cleaning up..."
            docker image prune -af
            
            # Show status
            echo "📊 Deployment status:"
            docker-compose ps
            
            echo "✅ Deployment completed successfully!"
          ENDSSH

      - name: ✅ Deployment complete
        run: |
          echo "🎉 ScriptSensei deployed successfully to DigitalOcean!"
          echo "🌐 Access at: http://${{ secrets.DROPLET_IP }}:5000"

